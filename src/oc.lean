import topology.category.Top

namespace Top

open category_theory
open topological_space

universes u
variables (X : Top.{u})

structure oc : Type (u+1) :=
(Œπ : Type.{u})
[lo : linear_order Œπ . tactic.apply_instance] 
[wo : is_well_order Œπ ((<) : Œπ ‚Üí Œπ ‚Üí Prop) . tactic.apply_instance]
(cover : Œπ ‚Üí opens X)
(is_cover : supr cover = ‚ä§)

attribute [instance] oc.lo oc.wo
attribute [simp] oc.is_cover

instance (A : X.oc) [nonempty X] : nonempty A.Œπ :=
‚ü®nonempty.some $ classical.by_contradiction $ Œª r, @@is_empty.false (not_nonempty_iff.mp r) $ 
  (opens.mem_supr.mp (by rw A.is_cover; trivial : nonempty.some infer_instance ‚àà supr A.cover)).some‚ü©

noncomputable instance (A : X.oc) [inhabited X] : inhabited A.Œπ :=
‚ü®nonempty.some infer_instance‚ü©

variables {X} 
/--
A cover `ùîÑ` refines a cover `ùîÖ` if there is a function `f` between their indexing sets such that
for all `i` in indexing set of `ùîÑ`, `ùîÑ·µ¢ ‚äÜ ùîÖ_{f i}`
-/
@[ext] structure refines (ùîÑ ùîÖ : X.oc) : Type (u+1) :=
(func : ùîÑ.Œπ ‚Üí ùîÖ.Œπ)
(strict_mono : strict_mono func)
(is_inj : function.injective func)
(is_refinement : ‚àÄ i : ùîÑ.Œπ, ùîÑ.cover i ‚â§ ùîÖ.cover (func i))

def refines.refl (ùîÑ : X.oc) : refines ùîÑ ùîÑ :=
{ func := id,
  strict_mono := strict_mono_id,
  is_inj := function.injective_id,
  is_refinement := Œª i, le_refl _ }

def refines.trans {ùîÑ ùîÖ ‚Ñ≠ : X.oc} (r1 : refines ùîÑ ùîÖ) (r2 : refines ùîÖ ‚Ñ≠) : refines ùîÑ ‚Ñ≠ :=
{ func := r2.func ‚àò r1.func,
  is_inj := function.injective.comp (r2.is_inj) (r1.is_inj),
  strict_mono := strict_mono.comp (r2.strict_mono) (r1.strict_mono),
  is_refinement := Œª i, le_trans (r1.is_refinement i) (r2.is_refinement $ r1.func i) }

-- instance : has_le X.oc :=
-- { le := Œª ùîÑ ùîÖ, nonempty (refines ùîÑ ùîÖ) }

-- instance : has_lt X.oc :=
-- { lt := Œª ùîÑ ùîÖ, ùîÑ ‚â§ ùîÖ ‚àß ¬¨ ùîÖ ‚â§ ùîÑ }

instance : inhabited X.oc :=
{ default := 
  { Œπ := punit,
    wo := ‚ü®{ apply := Œª x, by { cases x, fconstructor, rintros ‚ü®-‚ü© r, exfalso, simpa using r } }‚ü©,
    cover := Œª _, ‚ä§,
    is_cover := by simp } }

-- this is probably wrong
-- example (A : X.oc) (f : refines A A) (i) : f.func i = i :=
-- begin
--   have := @trichotomous _ ((<) : A.Œπ ‚Üí A.Œπ ‚Üí Prop) _ (f.func i) i,
--   rcases this,
--   { -- this is contradiction
--     -- suppose `a` is the least function such that `f a < a` then `f f a < f a < a` contradiction
--     sorry },
--   { rcases this,
--     { exact this },
--     { -- 
--       sorry } },
-- end


-- instance : preorder X.oc :=
-- { le := (‚â§),
--   lt := (<),
--   le_refl := Œª x, nonempty.intro $ refines.refl _,
--   le_trans := Œª _ _ _ ‚ü®r1‚ü© ‚ü®r2‚ü©, ‚ü®r1.trans r2‚ü©,
--   lt_iff_le_not_le := Œª _ _, ‚ü®id, id‚ü© }

-- def common_refinement (A B : X.oc) : X.oc :=
-- { Œπ := A.Œπ ‚äï B.Œπ,
--   lo := 
--   { le := sum.lex ((‚â§) : A.Œπ ‚Üí A.Œπ ‚Üí Prop) ((‚â§) : B.Œπ ‚Üí B.Œπ ‚Üí Prop),
--     lt := _,
--     le_refl := _,
--     le_trans := _,
--     lt_iff_le_not_le := _,
--     le_antisymm := _,
--     le_total := _,
--     decidable_le := _,
--     decidable_eq := _,
--     decidable_lt := _,
--     max := _,
--     max_def := _,
--     min := _,
--     min_def := _ },
--   wo := _,
--   cover := Œª i, sum.rec_on i A.cover B.cover,
--   is_cover := sorry }

instance : category_theory.small_category X.oc := 
{ hom := Œª A B, refines A B,
  id := Œª A, refines.refl A,
  comp := Œª A B C f g, refines.trans f g,
  id_comp' := Œª A B f, by ext; refl,
  comp_id' := Œª A B f, by ext; refl,
  assoc' := Œª A B C D f g h, by ext; refl }

-- instance : category_theory.is_filtered X.oc :=
-- { cocone_objs := Œª A B, sorry, -- common refinement
--   cocone_maps := Œª A B, sorry,
--   /-
--   A indexed by a
--   B indexed by b
--       f      
--   A ------> B 
--       g



--   -/
--   nonempty := ‚ü®default‚ü© }

end Top